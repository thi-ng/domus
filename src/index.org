#+SETUPFILE: setup.org
#+TITLE: thi.ng/domus

* About the project

** TODO Overview

CLJS DOM utils

** TODO Status
** TODO Example usage

#+BEGIN_SRC clojure
  (require 'thi.ng.domus.core)

  ;; TODO some magic
#+END_SRC

** License

This project is open source and licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache Software License 2.0]].

** Injected properties                                             :noexport:

#+BEGIN_SRC clojure :exports none :noweb-ref version
0.3.0-SNAPSHOT
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb-ref project-url
http://thi.ng/domus
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb-ref gen-source-path
target/classes
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb-ref gen-test-path
target/test-classes
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb yes :noweb-ref cljs-artefact-path
target/domus-<<version>>.js
#+END_SRC

** Dependencies
*** Runtime
**** [[https://github.com/clojure/clojure][Clojure]]
#+BEGIN_SRC clojure :noweb-ref dep-clj
[org.clojure/clojure "1.8.0"]
#+END_SRC

**** [[https://github.com/clojure/clojurescript][ClojureScript]]
#+BEGIN_SRC clojure :noweb-ref dep-cljs
[org.clojure/clojurescript "1.7.228"]
#+END_SRC

**** core.async
#+BEGIN_SRC clojure :noweb-ref dep-async
[org.clojure/core.async "0.2.374"]
#+END_SRC

**** [[https://github.com/postspectacular/cljs-log][cljs-log]]
#+BEGIN_SRC clojure :noweb-ref dep-cljslog
[cljs-log "0.2.2"]
#+END_SRC

**** [[https://github.com/thi-ng/strf][thi.ng/strf]]
#+NAME: dep-strf
#+BEGIN_SRC clojure
[thi.ng/strf "0.2.2"]
#+END_SRC

**** [[https://github.com/thi-ng/validate/][thi.ng/validate]]
#+BEGIN_SRC clojure :noweb-ref dep-validate
[thi.ng/validate "0.1.3"]
#+END_SRC

*** Development
**** [[https://github.com/cemerick/clojurescript.test][clojurescript.test]]
#+BEGIN_SRC clojure :noweb-ref dep-cljs-test
[com.cemerick/clojurescript.test "0.3.3"]
#+END_SRC
**** [[https://github.com/emezeske/lein-cljsbuild][Cljsbuild]]
#+BEGIN_SRC clojure :noweb-ref dep-cljsbuild
[lein-cljsbuild "1.1.3"]
#+END_SRC

** Contributors

| *Name*          | *Role*                          | *Website*                  |
|-----------------+---------------------------------+----------------------------|
| [[k@postspectacular.com][Karsten Schmidt]] | initiator & principal developer | http://postspectacular.com |
| Pierre Baille   | SVG additions                   | https://github.com/pbaille |

** Release history

| *Version* | *Released* | *Description*      | *Lein coordinates*       | *Tagged Github URL* |
|-----------+------------+--------------------+--------------------------+---------------------|
|     0.1.0 | 2015-02-23 | 1st public release | =[thi.ng/domus "0.1.0"]= | [[https://github.com/thi-ng/domus/tree/0.1.0][0.1.0]]               |

** Leiningen coordinates

#+BEGIN_SRC clojure :noweb yes :noweb-ref lein-coords
  [thi.ng/domus <<version>>]
#+END_SRC

** Building this project

This project is written in a literate programming format and requires
[[https://www.gnu.org/software/emacs/][Emacs]] & [[http://orgmode.org][Org-mode]] to generate usable source code in [[https://github.com/lynaghk/cljx][CLJX]] form. Assuming
both tools are installed, the easiest way to generate a working
project is via command line (make sure =emacs= is on your path or else
edit its path in =tangle.sh=):

#+BEGIN_SRC bash
  git clone https://github.com/thi.ng/domus.git
  cd domus
  ./tangle.sh src/*.org test/*.org
#+END_SRC

Tangling is the process of extracting & combining source blocks from
=.org= files into an actual working project/source tree. Once tangling
is complete, you can =cd= into the generated project directory
(=babel=) and then use =lein= as usual.

*** Testing

The =project.clj= file defines an alias to trigger a complete build &
tests for both CLJ & CLJS versions.

#+BEGIN_SRC bash
  cd babel
  lein cleantest
#+END_SRC

To build the Clojurescript version simply run =lein cljsbuild test=
from the same directory. A small HTML harness for the resulting JS
file is also located in that folder (=babel/index.html=), allowing for
further experimentation in the browser.

*** Working with the REPL

Since the generated =project.clj= (see below) includes REPL hooks for
CLJX, editing files in Org-mode, then re-loading & testing changes is
quite trivial. Simply launch a REPL (via =lein= or Emacs) as usual.
Everytime you've made changes to an =.org= file, re-tangle it from
Emacs (=C-c C-v t=) or =tangle.sh=, then reload the namespace in the
REPL via =(require 'thi.ng.domus... :reload)= or similar.

** Leiningen project file                                          :noexport:

#+BEGIN_SRC clojure :tangle ../babel/project.clj :noweb yes :mkdirp yes :padline no
  (defproject thi.ng/domus "<<version>>"
    :description "CLJS DOM utils"
    :url "<<project-url>>"
    :license {:name "Apache Software License 2.0"
              :url "http://www.apache.org/licenses/LICENSE-2.0"}
    :dependencies [<<dep-clj>>
                   <<dep-cljs>>
                   <<dep-async>>
                   <<dep-cljslog>>
                   <<dep-strf>>
                   <<dep-validate>>]

    :profiles {:dev {:plugins [<<dep-cljsbuild>>
                               <<dep-cljs-test>>]
                     :aliases {"cleantest" ["do" "clean" ["cljsbuild" "test"]]}}}

    :cljsbuild {:builds [{:source-paths ["src" "test"]
                          :id "dev"
                          :compiler {:output-to "<<cljs-artefact-path>>"
                                     :optimizations :whitespace
                                     :pretty-print true}}
                         {:source-paths ["src" "test"]
                          :id "prod"
                          :compiler {:output-to "<<cljs-artefact-path>>"
                                     :optimizations :advanced
                                     :pretty-print false}}]
                :test-commands {"unit-tests" ["phantomjs" :runner "<<cljs-artefact-path>>"]}}

    :pom-addition [:developers [:developer
                                [:name "Karsten Schmidt"]
                                [:url "http://postspectacular.com"]
                                [:timezone "0"]]])
#+END_SRC

** ClojureScript HTML harness                                      :noexport:

#+BEGIN_SRC html :tangle ../babel/index.html :noweb yes :mkdirp yes :padline no
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title><<lein-coords>> test</title>
    </head>
    <body>
      <script type="text/javascript" src="<<cljs-artefact-path>>"></script>
    </body>
  </html>
#+END_SRC
** Accessing library version during runtime

The autogenerated namespace =thi.ng.domus.version= contains a single
symbol =version= holding the version string defined above:

#+BEGIN_SRC clojure :noweb yes
  (use 'thi.ng.domus.version)
  
  (prn version)
  ; "<<version>>"
#+END_SRC

*** Version namespace                                              :noexport:

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/domus/version.cljs :noweb yes :mkdirp yes :padline no :exports none
  (ns thi.ng.domus.version)

  (def version "<<version>>")
#+END_SRC

* Modules

- [[./async.org][thi.ng.domus.async]]
- [[./core.org][thi.ng.domus.core]]
- [[./detect.org][thi.ng.domus.detect]]
- [[./io.org][thi.ng.domus.io]]
- [[./router.org][thi.ng.domus.router]]
- [[./utils.org][thi.ng.domus.utils]]

* Tests

- [[../test/core.org][core.org]]
